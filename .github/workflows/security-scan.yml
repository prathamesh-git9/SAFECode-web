name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Semgrep
      run: |
        python -m pip install --upgrade pip
        pip install semgrep
    
    - name: Install backend dependencies
      run: |
        cd backend
        pip install -r requirements.txt
    
    - name: Start backend server
      run: |
        cd backend
        # Set environment variables
        export SAFECODE_API_TOKEN=test-token
        export SEMGREP_TIMEOUT=30
        export SEMGREP_JOBS=2
        export SEMGREP_MAX_FINDINGS=100
        export SAFE_MAX_FINDINGS_RESPONSE=50
        export RATE_LIMIT_REQUESTS=1000
        export RATE_LIMIT_WINDOW=3600
        export CACHE_TTL_SECONDS=60
        export LOG_LEVEL=warning
        
        # Start server in background
        python -m uvicorn app.main:app --host 0.0.0.0 --port 8001 &
        SERVER_PID=$!
        
        # Wait for server to start
        sleep 10
        
        # Store PID for cleanup
        echo $SERVER_PID > server.pid
      env:
        PYTHONPATH: ${{ github.workspace }}/backend
    
    - name: Wait for server to be ready
      run: |
        # Wait for health endpoint
        for i in {1..30}; do
          if curl -f http://localhost:8001/health > /dev/null 2>&1; then
            echo "Server is ready"
            break
          fi
          echo "Waiting for server... ($i/30)"
          sleep 2
        done
    
    - name: Run API verification tests
      run: |
        cd backend
        python tools/verify_against_api.py --base-url http://localhost:8001 --corpus ../tests/corpus/manifest.jsonl --token test-token
    
    - name: Run Semgrep scan
      run: |
        # Run Semgrep on the codebase
        semgrep scan --config p/security-audit --json --output scan_results.json || true
        
        # Check for critical findings
        if [ -f scan_results.json ]; then
          CRITICAL_FINDINGS=$(jq '.results[] | select(.severity == "ERROR") | .check_id' scan_results.json | wc -l)
          HIGH_FINDINGS=$(jq '.results[] | select(.severity == "WARNING") | .check_id' scan_results.json | wc -l)
          
          echo "Critical findings: $CRITICAL_FINDINGS"
          echo "High findings: $HIGH_FINDINGS"
          
          # Fail if there are critical or high findings
          if [ "$CRITICAL_FINDINGS" -gt 0 ] || [ "$HIGH_FINDINGS" -gt 0 ]; then
            echo "❌ Found $CRITICAL_FINDINGS critical and $HIGH_FINDINGS high security findings"
            echo "Please review and fix the issues before merging"
            exit 1
          else
            echo "✅ No critical or high security findings found"
          fi
        else
          echo "No scan results found"
        fi
    
    - name: Upload scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: scan_results
        path: scan_results.json
    
    - name: Cleanup server
      if: always()
      run: |
        if [ -f backend/server.pid ]; then
          kill $(cat backend/server.pid) || true
        fi
    
    - name: Security scan summary
      run: |
        if [ -f scan_results.json ]; then
          echo "## Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          TOTAL_FINDINGS=$(jq '.results | length' scan_results.json)
          CRITICAL_FINDINGS=$(jq '.results[] | select(.severity == "ERROR") | .check_id' scan_results.json | wc -l)
          HIGH_FINDINGS=$(jq '.results[] | select(.severity == "WARNING") | .check_id' scan_results.json | wc -l)
          LOW_FINDINGS=$(jq '.results[] | select(.severity == "INFO") | .check_id' scan_results.json | wc -l)
          
          echo "- **Total Findings:** $TOTAL_FINDINGS" >> $GITHUB_STEP_SUMMARY
          echo "- **Critical:** $CRITICAL_FINDINGS" >> $GITHUB_STEP_SUMMARY
          echo "- **High:** $HIGH_FINDINGS" >> $GITHUB_STEP_SUMMARY
          echo "- **Low:** $LOW_FINDINGS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "$CRITICAL_FINDINGS" -gt 0 ] || [ "$HIGH_FINDINGS" -gt 0 ]; then
            echo "❌ **Security issues found!** Please review and fix before merging." >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ **No critical or high security issues found.**" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "## Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "No scan results available" >> $GITHUB_STEP_SUMMARY
        fi
